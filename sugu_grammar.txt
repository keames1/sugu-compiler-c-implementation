{*
  The entire grammar of the sugu programming language. Comments are ommitted from the syntax because they
  aren't processed by the parser at all. They're discarded by the lexer right out ot the gate.
  
  This is a multiline comment, and a single line comment begins in a hash symbol. # This is also a comment.
*}

Program        : Imports?, (ImplicitMain | ExplicitMain)?,
                  (Initialization | GlobalConstDeclaration | GlobalInitialization |
                  Nonruntime | Function | Enum | Struct)*

Imports        : (Import* | ('namespace', Identifier, ':', '\n', 
                 (Import | '|')*, ('\n', '\n') | '\')) *

Import         : 'import', Identifier, ('::', Identifier) *, '\n'

ImplicitMain   : ((Statement | '|'), ('\n' | ';'))*

ExplicitMain   : 'fun', 'main', 'i32', '(', (Identifier, 'List')?, ')', ':', '\n',
                  StmtBlock

# Nonruntimes are executed during compilation and can compute the values of constants declared available
# using the .available keyword.

Nonruntime     : '.nonruntime', '\n',
                  (Statement | Function | Struct | Enum | AvailableStmt | UnavailableStmt | '|') *,
                  '\n', '.end', '\n'

AvailableStmt  : '.available', (ArgList | 'all')

UnavailableStmt: '.unavailable' (ArgList | 'all')

Function       : 'fun', Identifier, (TypeKeyword | 'noreturn'),
                 '(', ('impl', Identifier, TypeKeyword)?, ParamList?, ')', ':', '\n',
                    StmtBlock
               : ErrFunc
               : OverrideFunc

# The default error handling functions take a lambda which tries to handle the error and returns True
# if it succeeded.

ErrFunc        : '.error', ('$', Identifier | TypeKeyword), '\n',
                 'fun', Identifier, 'noreturn',
                   '(', Identifier, 'sig' | 'signature', 'bool', '(', ')', ')'

OverrideFunc   : '.override', '\n'
                 Function

# Enums can also inherit from other enums. This defaults
# the first enumerand to superEnum.largerstEnumerand + 1.
# Enums can inherit from only one other enum and the values
# of the enumerands in the type hierarchy cannot conflict.

Enum           : 'enum', Identifier, ( '(', Identifier, ')' )?, ':', '\n',
                 ((Identifier | EnumerandAssign | Enum), ',')*, (Identifier | EnumerandAssign), ','?,
                 (('\n', '\n') | '\')
               : BitFieldEnum

# Bit field enums cannot inherrit from other enums nor contain enums recursively.
# A single identifier defaults to being 1 bit which may have names assigned to their 2 values
# (The default is the fields integer value being recognized instead.) Using the double colon syntax,
# a bit field can be given more than one bit. It must be possible to evaluate the expression after
# the :: at compile time. Expr result number of bits is assigned to that bit field. All values in
# the multiple bit field can then be assigned names with the curly brace syntax or subdivided into
# smaller bit fields.

BitFieldEnum   : '.bitField', '\n'
                 'enum', Identifier, ':', '\n'
                 (BitFieldEnumerandDeclaration | '|') *,
                 (('\n', '\n') | '\')

MultiBitField  : Identifier, '::', Expr, ':', '\n'
                 (
                   ('{', (BitFieldEnumerandDeclaration, ',')*, BitFieldEnumerandDeclaration, ','?, '}')   |
                   MultiBitField |
                   '|'
                 ) *

BitFieldEnumerandDeclaration : Identifier, ('{', (Identifier, Identifier) | 'bool', '}') ?, ',', '\n'
               : MultiBitField

EnumerandAssign: Identifier, '=', Expr

Struct         : 'struct', Identifier, ( '(', Identifier?, (',' Identifier, ','?)* ')' )?, ':', '\n',
                  (FieldDeclaration | ConstDeclaration | Struct | Enum)*, ('\n', '\n') | '\'

# The compiler can populate a structs fields with default values when it allocates the struct.

FieldDeclaration : 'field', Identifier, TypeKeyword, ('=', Expr)?, '\n' | ';'

GlobalConstDeclaration : 'global', ConstDeclaration
GlobalInitialization   : 'global', Initialization

{*
  A function prefixed with a .error statement is called when an error is raised. It either handles the error
  or it leaves with a status of stdlib::PANIC.
*}

Statement      : Expr, ('\n' | ';')
               : Initialization
               : Assign
               : ConstDeclaration
               : If_stmt
               : Elif_stmt
               : Else_stmt
               : Switch_stmt
               : While_stmt
               : For_stmt
               : Isol_stmt          # Used to limit the scope of variables declared inside it.
               : With_stmt
               : Break_stmt
               : Continue_stmt
               : Return_stmt
               : Raise_stmt
               : Leave_stmt         # Exit the program without returning to main with a specified exit status.

If_stmt        : 'if', expr, ':', '\n',
                 StmtBlock

Elif_stmt      : 'elif', expr, ':', '\n'
                 StmtBlock

Else_stmt      : 'else', ':', '\n'
                 StmtBlock

Switch_stmt    : 'switch', expr, ':', '\n'
                   Case_stmtBlock *,
                 'case', 'default', ':', '\n'
                   StmtBlock,
                   Break_stmt?

Case_stmtBlock : 'case', Expr, ':', '\n'
                   StmtBlock,
                   Break_stmt?

# The keyword 'post' will declare the while loop to be a post test loop.

While_stmt     : 'while', 'post'?, expr, ':', '\n'
                   StmtBlock

For_stmt       : 'for', Initialization | Assign, 'in', '[', Expr, 'to', Expr, ']', ':', '\n'
                   StmtBlock

               : 'for', Initialization | Assign, 'in',
                 (Identifier | MemFieldRef | StringLiteral | ArrLiteral | FunCall), ':', '\n'
                   StmtBlock

               : 'for', Initialization | Assign, ';', Expr, ';', Expr | Assign, ':', '\n'
                   StmtBlock

Isol_stmt      : 'isolate', (('using', Identifier | MemFieldRef)* | ('using', 'any'))?, ':', '\n'
                   StmtBlock

with_stmt      : 'with' Expr 'as' Identifier, TypeKeyword, ':', '\n'
                   StmtBlock

Break_stmt     : 'break', '\n' | ';'

Contunue_stmt  : 'continue', '\n' | ';'

Return_stmt    : 'return', Expr?, '\n' | ';'

Raise_stmt     : 'raise', Expr, '\n' | ';'

Leave_stmt     : 'leave', Expr, '\n' | ';'

StmtBlock      : (Statement | '|')*, ('\n', '\n') | '\'

ConstDeclaration : 'const', Initialization

# There is no variable declaration because all variables in sugu must be initialized to prevent garbage
# from getting into the program.

Initialization : Identifier, ( TypeKeyword | DeclaredType ), '=', expr, ('\n' | ';')

DeclaredType   : '$', Identifier

Assign         : (Identifier | MemFieldRef), ('=' | InPlaceArrithOperator), expr, ('\n' | ';')

# The in place arrithmetic only works with some of the operators. No keyword operators, no unary operators.

InPlaceArrithOperator : InPlaceArrSubset, <NO_SEPERATOR> '='

InPlaceArrSubset : '+' | '-' | '**' | '*' | '//' | '/' | '%' | '^' | '&' | '|' | '>>' | '<<'

Expr           : Expr, MainOperator, Expr
               : MainOperator, Expr
               : Identifier | MemFieldRef, ('<+' | '<-')
               : Expr, 'if', Expr, ('elif', expr, ':', expr)*, 'else', Expr
               : Atom | FunCall | ParenExpr

ParenExpr      : '(', expr, ')'

# These are ordered by token precidence (Excluding atoms and function calls). +, -, and * are duplicated,
# signifying their precidence as both unary and binary operators. \ is the indexing operator.
# It's behavior, not syntax but unary + will be an absolute value operator. (I think this will be more useful.)
# <+ and <- are in place increment and decrement respectively (Postfix operators).

MainOperator   : 'not'| '~' | '$' | '+' | '-' | '&' | '*'
               : 'and' | 'or' | '==' | '!=' | '>=' | '<=' | '<' | '>'
               : '**' | '*' | '/' | '//' | '%' | '+' | '-'
               : '(', TypeKeyword, ')'

FunCall        : Identifier | MemFieldRef, '(', ArgsList? ')'

ArgsList       : (Expr, ',') *, Expr, ','?
               : (Expr, ',') *, ('**', Expr, ','?)?

Atom           : Identifier | MemFieldRef | IntegerLiteral | FloatLiteral
               : CharLiteral | StringLiteral | ArrayLiteral | Singleton | Lambda

Singleton      : 'True' | 'False' | 'None'

Lambda         : '(', ParamList, ')', ':', '\n'
                 StmtBlock

IntegerLiteral : (ImplicitDecimal | ExplicitDecimal | Hexadecimal | Binary), TypeKeyword?

ImplicitDecimal: ('0' - '9'), ('0' - '9' | '_') *

ExplicitDecimal: ('0d' | '0D'), ('0' - '9'), ('0' - '9' | '_') *

Hexadecimal    : ('0x' | '0X'), ('0' - '9' | 'a' - 'f' | 'A' - 'F' | '_') *

Binary         : ('0b' | '0B'), ('0' | '1' | '_')

# Floats are only supported in decimal as of now.

FloatLiteral   : ('0d' | '0D')?, ('0' - '9'), ('0' - '9' | '_') * '.', ('0' - '9' | '_') +

# It says StringBody for convenience reasons. If the string evaluates to length greater than 1 in a character
# literal, the compiler will yell and scream.

CharLiteral    : '\'', StringBody, '\''

StringLiteral  : '"', StringBody, '"'

ArrayLiteral   : '[', (Expr, ',') *, Expr, ','?, ']', TypeKeyword?

TypeKeyword    : 'i8' | 'i16' | 'i32' | 'i64' | 'iexp' | 'u8' | 'u16' | 'u32' | 'u64' | 'f32' | 'f64'
               : 'fexp' | 'char' | 'bool' | ('ref', TypeKeyword) | ('ref', '$', Identifier) | 'String' | 'str'
               : 'List'
               : '$', Identifier | MemFieldRef
               : 'signature', TypeKeyword, '(', (TypeKeyword, ',')*, TypeKeyword, ',', ')'
               : 'sig', TypeKeyword, '(', (TypeKeyword, ',')*, TypeKeyword, ',', ')'

# ! means anything other than the characters in its operand. {An exact number}

StringBody     : ( !('"' | '\')*, ('\"' | '\n' | '\N' | '\t' | '\T', | '\\' | ('\{', Expr, '}') |
                   ('\x', ('0' - '9' | 'A' - 'F' | 'a' - 'f') {2}))
                 )

ParamList      : ('impl', Identifier, TypeKeyword | declaredType)?,
                 ((Identifier, TypeKeyword | DeclaredType), ',')*,
                 (Identifier, TypeKeyword | DeclaredType), ','?
               : ''

MemFieldRef    : (Expr, '.'), (Identifier, '.') *, Identifier
               : (Identifier, '.') +, Identifier

Identifier     : (('a' - 'z' | '_') +, ('a' - 'z' | '_' | '0' - '9') *)
